#!/usr/bin/env python3
import json
import os
from colorama import Fore, Style
import sys
import requests

CONFIG_DIR = os.path.expanduser('~')+'/.config'

wmlist = {}

wm_choice = ""
wm_sel_list = []

HELP_STRING = """
WMsel: Simple Xorg and Wayland Session selector written in Python

Usage:
  wmsel: start wmsel
    --help: show this menu
    --list: list all WM/DE configurations
    add [NAME OF WM/DE]: download wmsel configuration for specified WM/DE (standard source: \"kurohe.xyz/repos/wmsel/wm_configs/\") and append to config file
    remove [NAME OF WM/DE]: remove existing configuration for specified WM/DE
"""


def input_error():
    input(Fore.RED+'ERROR: Invalid input, press Enter to try again.'+Style.RESET_ALL)

def front_end(expand = -1,wmlist = {}):
    no_last_used = False
    last_used = ""
    os.system('clear')
    try:
        with open(CONFIG_DIR+"/wmsel/.lastused","r") as f:
            last_used = f.read()
    except Exception:
        print(Fore.YELLOW+"WARNING: No last used setup found")
        no_last_used=True
    print(Fore.MAGENTA+'\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')    
    print(Fore.GREEN + 'Select your Window Manager / Desktop Environment:\n')
    i = 0
    for key in wmlist:
        wm_sel_list.append(key)
        print(f'{Fore.BLUE}{i+1}: {key}')
        if expand == i:
            print(Fore.YELLOW+f'Description: {wmlist[key]["desc"]}')
            print(f'Display Server: {wmlist[key]["type"]}')
            print(f'Link: {wmlist[key]["link"]}\n')
        i+=1
    print(Fore.MAGENTA+'\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~') 
    print(Fore.BLUE+'\nq: None\neN: Expand number N')
    if not no_last_used:
        ch = input(Style.RESET_ALL+f'\nEnter your Choice\n[{last_used}] » ')
    else:
        ch = input(Style.RESET_ALL+f'\nEnter your Choice\n» ')
    if ch == 'q':
        exit(0)
    elif ch.startswith('e') and len(ch) >= 2:
        try:
            return front_end(int(ch[-1])-1,wmlist)
        except ValueError:
            input_error()
            return front_end(-1,wmlist)
    elif ch == "":
        return last_used
    else:
        try:
            if int(ch) <= len(wm_sel_list):
                return wm_sel_list[int(ch)-1]
        except ValueError:
            input_error()
            return front_end(-1,wmlist)
        
if __name__ == "__main__":

    # Check if ~/.config/wmsel non-existent
    if not "wmsel" in os.listdir(CONFIG_DIR):
        os.makedirs(CONFIG_DIR+"/wmsel")

    if len(sys.argv) == 1:
        # Read in WM list
        try:
            with open(CONFIG_DIR+"/wmsel/wmlist.json","r") as f:
                wmlist = json.load(f)
        except FileNotFoundError:
            print(Fore.RED+"ERROR: No wmlist file found. Creating a blank one...")
            print("Use \"wmsel add [NAME OF WM/DE]\" to add entries"+Style.RESET_ALL)
            with open(CONFIG_DIR+"/wmsel/wmlist.json","w") as f:
                f.write("{}")
                wmlist = {}
            exit(1)

        # Front end prompt
        wm_choice = front_end(-1,wmlist)
        wm_command = wmlist[wm_choice]["command"]

        # startx path/to/wm_binary || start wayland compositor
        if wmlist[wm_choice]["type"] == 'X':
            with open(CONFIG_DIR+"/wmsel/.lastused","w") as f:
                f.write(wm_choice)
            os.system('startx '+wm_command)
        elif wmlist[wm_choice]["type"] == 'Wayland':
            with open(CONFIG_DIR+"/wmsel/.lastused","w") as f:
                f.write(wm_choice)
            os.system(wm_command)
        else:
            print(Fore.RED+'ERROR: Invalid wmlist!'+Style.RESET_ALL)


    # Help menu
    elif len(sys.argv) == 2:
        if sys.argv[1] == "--help":
            print(HELP_STRING)
        elif sys.argv[1] == "--list":
            with open(CONFIG_DIR+"/wmsel/wmlist.json","r") as ls:
                for k in json.load(ls).keys():
                    print(k)
        else:
            print(Fore.RED+"ERROR: invalid arguments"+Style.RESET_ALL)

    elif len(sys.argv) == 3:
        # Add configuration
        if sys.argv[1] == "add":
            source = "https://kurohe.xyz/repos/wmsel/wm_configs/"
            try:
                with open(CONFIG_DIR+"/wmsel/.configsource","r") as f:
                    source = f.read
            except FileNotFoundError:
                pass
            req = requests.get(source+sys.argv[2])
            if req.status_code == 200:
                getconf = req.json()
                curconf = {}
                with open(CONFIG_DIR+"/wmsel/wmlist.json", "r+") as f:
                    curconf = json.load(f)
                    curconf[sys.argv[2]] = getconf
                with open(CONFIG_DIR+"/wmsel/wmlist.json", "w") as f:
                    json.dump(curconf, f, indent=4)
        
        # Remove configuration
        elif sys.argv[1] == "remove":
            conf = {}
            with open(CONFIG_DIR+"/wmsel/wmlist.json", "r+") as f:
                conf = json.load(f)
                try:
                    del conf[sys.argv[2]]
                    f.seek(0)
                    json.dump(conf, f, indent=4)
                except KeyError:
                    print(Fore.RED+"ERROR: cannot remove non-existing configuration")
                    exit(1)
            with open(CONFIG_DIR+"/wmsel/wmlist.json", "w") as f:
                    json.dump(conf, f, indent=4)
        else:
            print(Fore.RED+"ERROR: invalid arguments"+Style.RESET_ALL)
            

    else:
        print(Fore.RED+"ERROR: Too many arguments"+Style.RESET_ALL)

